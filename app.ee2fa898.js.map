{"version":3,"sources":["dino/data.json","dino/index.js","grid/grid.js","app.js"],"names":["module","exports","Dinos","species","weight","height","diet","where","when","fact","subtract","a","b","getRandomInt","max","Math","floor","random","Dino","dino","humanInput","randomFact","setFact","factOptionName","feet","inches","totalHeight","compareHeightAndSetFact","compareWeightAndSetFact","compareDietAndSetFact","toLowerCase","getDinos","compareOptions","length","map","getImage","url","substring","createGridItem","name","image","window","location","origin","insertHumanInfoInGrid","human","dinos","humanInformation","images","splice","loadGridItems","humanInfo","dinosGrid","forEach","push","grid","document","getElementById","form","container","createButton","text","callback","button","createElement","innerText","id","onclick","convertFeetToInches","getInputFormValues","inputFormElements","Array","prototype","call","value","isNameEqualToFeet","goBack","innerHTML","remove","reset","style","display","onSubmit","event","preventDefault","inputFormValues","target","elements","join","append","addEventListener"],"mappings":"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","file":"app.ee2fa898.js","sourceRoot":"../src","sourcesContent":["module.exports={Dinos:[{species:\"Triceratops\",weight:13e3,height:114,diet:\"herbavor\",where:\"North America\",when:\"Late Cretaceous\",fact:\"First discovered in 1889 by Othniel Charles Marsh\"},{species:\"Tyrannosaurus Rex\",weight:11905,height:144,diet:\"carnivor\",where:\"North America\",when:\"Late Cretaceous\",fact:\"The largest known skull measures in at 5 feet long.\"},{species:\"Anklyosaurus\",weight:10500,height:55,diet:\"herbavor\",where:\"North America\",when:\"Late Cretaceous\",fact:\"Anklyosaurus survived for approximately 135 million years.\"},{species:\"Brachiosaurus\",weight:7e4,height:\"372\",diet:\"herbavor\",where:\"North America\",when:\"Late Jurasic\",fact:\"An asteroid was named 9954 Brachiosaurus in 1991.\"},{species:\"Stegosaurus\",weight:11600,height:79,diet:\"herbavor\",where:\"North America, Europe, Asia\",when:\"Late Jurasic to Early Cretaceous\",fact:\"The Stegosaurus had between 17 and 22 seperate places and flat spines.\"},{species:\"Elasmosaurus\",weight:16e3,height:59,diet:\"carnivor\",where:\"North America\",when:\"Late Cretaceous\",fact:\"Elasmosaurus was a marine reptile first discovered in Kansas.\"},{species:\"Pteranodon\",weight:44,height:20,diet:\"carnivor\",where:\"North America\",when:\"Late Cretaceous\",fact:\"Actually a flying reptile, the Pteranodon is not a dinosaur.\"},{species:\"Pigeon\",weight:.5,height:9,diet:\"herbavor\",where:\"World Wide\",when:\"Holocene\",fact:\"All birds are living dinosaurs.\"}]};","import { Dinos } from \"./data.json\";\n\nconst subtract = (a,b) => a - b ;\n\n// random number generator\nfunction getRandomInt(max) {\n\treturn Math.floor(Math.random() * Math.floor(max));\n}\n\nexport class Dino {\n\tconstructor({dino, humanInput,randomFact}) {\n\t\tconst { height, weight, diet, species, fact } = dino;\n\t\tthis.height = height;\n\t\tthis.weight = weight;\n\t\tthis.diet = diet;\n\t\tthis.species = species;\n\n\t\t// identifying bird or dino, birds weigh less than dino.\n\t\tif(weight > 1){\n\t\t\t// setting facts by comparing the user\n\t\t\tthis.setFact(humanInput,randomFact,fact);\n\t\t} else {\n\t\t\t// for birds setting fact as it is without comparing.\n\t\t\tthis.fact = fact;\n\t\t}\n\t}\n\n\tsetFact({ feet, inches, diet, weight} ,factOptionName,fact) {\n\t\tswitch (factOptionName) {\n\t\t\tcase 'height':\n\t\t\t\tconst totalHeight = feet + inches;\n\t\t\t\tthis.fact = this.compareHeightAndSetFact(totalHeight)\n\t\t\t\tbreak;\n\t\t\tcase 'weight':\n\t\t\t\tthis.fact = this.compareWeightAndSetFact(weight);\n\t\t\t\tbreak;\n\t\t\tcase 'diet':\n\t\t\t\tthis.fact = this.compareDietAndSetFact(diet);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.fact = \"no fact to display\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n    // compares the height of dino vs human and returns the fact.\n\tcompareHeightAndSetFact(height) {\n\t\t// Note height in inches.\n\t\tlet fact = `Our heights are equal!  ${height} inches`;\n\t\tif (this.height > height) {\n\t\t\tfact = `I am taller than you by ${this.height - height} inches`;\n\t\t} else if (this.height < height) {\n\t\t\tfact = `You are taller than me by ${subtract(height, this.height)} inches`;\n\t\t} else {\n\t\t\t//swallow\n\t\t}\n\t\treturn fact;\n\t}\n\n\t// compares the weight of dino vs human and returns the fact.\n\tcompareWeightAndSetFact(weight) {\n\t\t// NOTE: Weight in JSON file is in lbs.\n\t\tlet fact = `Our weights are equal! ${weight} lbs`;\n\t\tif (this.weight > weight) {\n\t\t\tfact = `I am weigh more than you by ${subtract(this.weight, weight)} lbs`;\n\t\t} else if (this.weight < weight) {\n\t\t\tfact = `You weigh more than me by ${subtract(weight, this.weight)} lbs`\n\t\t} else {\n\t\t\t// swallow \n\t\t}\n\t\treturn fact;\n\t}\n\n\t// compares the diet of dino vs human and returns the fact.\n\tcompareDietAndSetFact(diet) {\n\t\tlet fact;\n\t\tif (this.diet === diet.toLowerCase()) {\n\t\t\tfact = `Our diets are same, ${diet}!`\n\t\t} else {\n\t\t\tfact = `Our diets are different`;\n\t\t}\n\t\treturn fact;\n\t}\n}\n\n\nexport default function getDinos(humanInput) {\n\tconst compareOptions = [\"height\", \"weight\",\"diet\"];\n\tconst randomFact = compareOptions [getRandomInt(compareOptions.length)];\n\treturn Dinos.map(dino => new Dino({dino, humanInput,randomFact}));\n}\n","import images from \"../images/*.png\";\nimport \"./grid.css\";\n\n// removing slash from the input image .\nconst getImage = url => {\n\treturn url.substring(1);\n};\n\nconst createGridItem = ({ name, image,fact }) =>\n\t` <div class=\"grid-item\">\n\t  \t<h3>${name}</h3>\n  \t\t\t<img src=\"${window.location.origin}/${image}\" alt=\"${name}\" style=\"width:auto;\">\n\t\t\t${fact ? `<p>${fact ? fact: '&nbsp;'}</p>`:  `&nbsp;`}\n\t</div>`;\n\n// inserting human information into the grid.\nconst insertHumanInfoInGrid = (human, dinos) => {\n\tconst humanInformation = createGridItem({\n\t\tname: human.name,\n\t\timage: getImage(images[\"human\"])\n\t});\n\t// inserting the human information at the center of the grid.\n\tdinos.splice(Math.floor(dinos.length / 2), 0, humanInformation);\n\treturn dinos;\n};\n\n// Add tiles of dinos and human to DOM\nexport const loadGridItems = (dinos, humanInfo) => {\n\tconst dinosGrid = [];\n\t// Generate Tiles for each Dino in Array\n\tdinos.forEach(dino => {\n\t\tdinosGrid.push(\n\t\t\tcreateGridItem({\n\t\t\t\tname: dino.species,\n\t\t\t\timage: getImage(images[dino.species.toLowerCase()]),\n\t\t\t\tfact: dino.fact\n\t\t\t}));\n\t});\n\n\treturn insertHumanInfoInGrid(humanInfo, dinosGrid);\n};\n","import getDinos from \"./dino/index\";\nimport {loadGridItems} from \"./grid/grid\";\n\nexport const grid = document.getElementById(\"grid\");\nexport const form = document.getElementById(\"dino-compare\");\nexport const container = document.getElementById(\"container\");\nexport let human = {};\n\n// creating button for user .\nconst createButton = (text,callback)=>{\n\tconst button = document.createElement(\"button\");\n\tbutton.innerText = text;\n\tbutton.id=\"goBack\";\n\tbutton.onclick = callback;\n\treturn button;\n}\n\n// converts feet into inches\nconst convertFeetToInches = (feet) =>feet*12;\n\n// get values from form\nconst getInputFormValues = inputFormElements => {\n\tconst humanInformation = {};\n\tArray.prototype.forEach.call(inputFormElements, ({ name, value }) => {\n\t\tlet isNameEqualToFeet = name === \"feet\";\n\t\thumanInformation[name] = isNameEqualToFeet ? convertFeetToInches(value) : value;\n\t});\n\tdelete humanInformation[\"\"];\n\treturn humanInformation;\n};\n\n// displaying form and hiding the grid.\nconst goBack = ()=>{\n\t// removing grid items and goback button\n\tgrid.innerHTML = null;\n\tdocument.getElementById(\"goBack\").remove();\n\n\t// displaying and resetting the forms.\n\tform.reset();\n\tform.style.display = \"block\";\n}\n\nconst onSubmit = event => {\n\tevent.preventDefault();\n\t// setting form values to human\n\tlet inputFormValues = getInputFormValues(event.target.elements);\n\n\t// hiding form elements from the ui.\n\tform.style.display = \"none\";\n\n    // fetching the dinos from the dinos.json\n\tlet dinos = getDinos(inputFormValues);\n\n\t// loading all the fetched dinos & human in the grid\n\tgrid.innerHTML = loadGridItems(dinos, inputFormValues).join(\"\");\n\n\t// adding goback button to the DOM\n\tcontainer.append(createButton(\"go back\", goBack));\n};\n\n// addEventListener for form submission\nform.addEventListener(\"submit\", onSubmit);\n"]}